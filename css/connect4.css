/* add custom font */
@font-face {
	font-family: maldini;
	src: url("../font/maldiniStyle.ttf");
}
html {
	margin: 0px;
	width: 100%;
}

body {
	margin: 0px;
	min-width: 100%;
	width: 100%;
}
/* gradient wraps in such a way to make it look like the game is on a flat surface, so i left it repeating */
body {
	background: linear-gradient(
		0deg,
		rgba(99, 28, 241, 1) 12%,
		rgba(28, 241, 170, 1) 78%
	);
	overflow: hidden;
}

/* box for option icons */
.option-container {
	position: absolute;
	display: block;
	right: 0px;
	top: 0px;
	width: 100px;
	height: 300px;
}

/* hide on title screen */
.option-btn img {
	display: none;
}
/* used to fade in buttons on game board transition */
.option-btn img.playing {
	display: block;
	width: 100px;
	height: 100px;
}
/* invents icon color */
.option-btn img.pressed {
	filter: invert(1);
}
/* current play icon  */
#current-p {
	display: block;
	width: 90px;
	height: 90px;
}

#start {
	height: 90vh;
	position: relative;
}

#title {
	font-size: 8rem;
	perspective: 600px;
}

#title > p {
	transform: rotateX(15deg);
	font-family: "maldini";
	padding: 20px;
	margin: 20px;
	font-size: 200px;
	line-height: 0.75;
	text-align: center;
	color: #000000;
}

/* transitions from start title to game board, uses fade in chained on */
#start.playing {
	margin-top: -90vh;
}

#start-button {
	font-size: 50px;
}

.btn {
	background-color: #1c62f1;
	color: white;
	border: none;
}

.btn:hover {
	cursor: pointer;
	background-color: #0f347c;
	transition-duration: 0.5s;
	border: none;
}

/* wraps start button and title */
.start-container {
	font-family: "maldini";
	flex-wrap: wrap;
	margin-top: 15%;
}

/* wraps whole app */
.container {
	position: relative;
	display: inline-block;
	box-sizing: border-box;
	margin: auto;
	padding: auto;
	width: 100%;
	height: 100%;
	display: flex;
	justify-content: center;
}

/* css grid container used for game board cells and pieces */
.grid-container {
	display: grid;
	grid-template-columns: repeat(7, 85px);
	grid-template-rows: repeat(7, 85px);
	gap: 25px 25px;
}

/* game board png, z-index to front */
#front img {
	position: absolute;
	margin-left: auto;
	margin-right: auto;
	top: 85px;
	left: 18px;
	right: 0;
	bottom: 15px;
	z-index: 1;
	height: auto;
}

/* top is grid container row of clickable areas for each element */
.top {
	border-radius: 50%;
	z-index: 1;
	padding: 0px;
	width: 100%;
	height: 100%;
	box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.1);
	border-top: 2px solid rgba(255, 255, 255, 0.3);
	border-left: 2px solid rgba(255, 255, 255, 0.3);
	border-bottom: 2px solid rgba(209, 156, 53, 0.3);
	border-right: 2px solid rgba(209, 156, 53, 0.5);
	box-shadow: inset 0px 0px 2px 2px rgba(153, 106, 26, 0.05);
}

.top.p1 {
	background-color: none;
}

.top.p2 {
	background-color: none;
}

.top.old {
	background-color: none;
}

.top.p1:hover {
	background-color: #f11c40;
}

.top.p2:hover {
	background-color: #f1df1c;
}

.top.old:hover {
	background-color: black;
}

/* piece design styles, will try to make more like a game piece in the future */
.piece {
	margin: 4px;
	padding: 0px;
	width: 109%;
	height: 109%;
	border-radius: 50%;
	display: inline-block;
	box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.1);
	border-top: 2px solid rgba(255, 255, 255, 0.3);
	border-left: 2px solid rgba(255, 255, 255, 0.3);
	border-bottom: 2px solid rgba(209, 156, 53, 0.3);
	border-right: 2px solid rgba(209, 156, 53, 0.5);
	box-shadow: inset 0px 0px 2px 2px rgba(153, 106, 26, 0.05);
}

/* piece color classes */
.piece.p1 {
	background-color: #f11c40;
}

.piece.p2 {
	background-color: #f1df1c;
}

.piece.old {
	background-color: black;
}
/* hides game over */
#end {
	display: none;
}

/* game over overlay */
#end.game-over {
	display: flex;
	position: absolute;
	background-color: rgba(0, 0, 0, 0.65);
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
	flex-direction: column;
	align-items: center;
	color: white;
	justify-content: space-around;
	font-family: "maldini";
	text-align: center;
	z-index: 5;
}

#end h1 {
	font-size: 200px;
}

#restart-button {
	font-size: 50px;
}

/* animation effect to modulate opacity, to be applied to winning combinations of game board pieces */
@keyframes shiny {
	0% {
		opacity: 0;
	}
	25% {
		opacity: 1;
	}
	50% {
		opacity: 0;
	}
	75% {
		opacity: 1;
	}
	100% {
		opacity: 0;
	}
}

/* newly added pieces start faded out and translated 400px upwards on the y-axis then drops, has a little bounce effect at 30% and 55% keyframes*/
@keyframes drop {
	0% {
		opacity: 0;
		transform: translateY(-400px);
	}
	10% {
		opacity: 1;
		transform: translateY(0);
	}
	30% {
		opacity: 1;
		transform: translateY(-100px);
	}
	50% {
		opacity: 1;
		transform: translateY(0px);
	}
	55% {
		opacity: 1;
		transform: translateY(-10px);
	}
	65% {
		opacity: 1;
		transform: translateY(0);
	}
	100% {
		opacity: 1;
		transform: translateY(0);
	}
}

/* class to add drop effect to game piece */
.p-drop {
	opacity: 0;
	animation: drop 0.5s linear 0s 1 forwards;
}

/* chains shiny animation onto p-drop, if .p-drop is removed pieces bug out, so it works better to just apply it on top, to be used with winning pieces combination */
.p-drop.shiny {
	opacity: 0;
	animation-name: drop, shiny;
	animation-duration: 0s, 2.5s;
	animation-timing-function: linear, linear;
	animation-delay: 0s, 0s;
	animation-iteration-count: 1, infinite;
	animation-direction: forwards, forwards;
}
/* fades opacity from 0 to 1 over 2 seconds */
.fade-in {
	opacity: 1;
	animation-name: fadeInOpacity;
	animation-iteration-count: 1;
	animation-timing-function: linear;
	animation-duration: 2s;
}

/* same but faster, 1 second */
.fade-in-fast {
	opacity: 1;
	animation-name: fadeInOpacity;
	animation-iteration-count: 1;
	animation-timing-function: linear;
	animation-duration: 1s;
}

/* keyframes for fade in, goes from 0 to 1 opacity */
@keyframes fadeInOpacity {
	0% {
		opacity: 0;
	}
	100% {
		opacity: 1;
	}
}
